#!/usr/bin/env python
# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4
# -*- encoding=utf8 -*-
# Author 2011 Hsin-Yi Chen
import argparse
import os
import ucltip

def inblogdir(root='.'):
    return os.path.isfile(os.path.join(root, '_config.yml'))

ucltip.regcmds('git', 'gem', cls=ucltip.CmdDispatcher)
try:
    ucltip.regcmds('rake', 'bundle', 'sensible-editor')
except ucltip.CommandNotFound, e:
    pass

class Management(object):

    def __init__(self):
        self.parser = argparse.ArgumentParser()
        self._initsubcommands()

    def _initsubcommands(self):
        self.subparsers = self.parser.add_subparsers(title='subcommands',
                                    help='additional help')
        for attr in dir(self):
            if not attr.startswith('do'):
                continue
            _attr = attr[2:]
            try:
                _help = getattr(self, attr).__doc__
                _help = _help and _help.split('\n')[0] or None
            except IndexError:
                _help = None
            subcmd = _attr.lower()
            subparser = self.subparsers.add_parser(subcmd, help=_help)
            subparser.set_defaults(func=getattr(self,attr))
            setattr(self, "parser_{}".format(subcmd), subparser)
            # setup arg of parser
            try:
                fn = getattr(self, "_setargs{}".format(_attr))
                if callable(fn):    fn()
            except AttributeError:
                pass

    def run(self, args):
        if not args:
            args = ['-h']
        args = self.parser.parse_args(args)
        args.func(args)

class Console(Management):

    def prepare(self):
        self.execname = os.path.basename(__file__)
        if inblogdir():
            def _ch(e):
                return e.strip().replace('* ','')
            self.branchs = filter(lambda e: e.startswith('drafts/'), \
                         map(_ch, git.branch().split('\n')))

            self.blogdir = os.path.abspath(os.path.curdir) or None

    # General commands
    # ------------------
    def doforeach(self, args):
        """run command in each sub octopress directories in current directories
        """
        for _dir in filter(lambda e: inblogdir(e), os.listdir('.')):
            os.system('cd {} && {}'.format(_dir, args.cmd))

    def _setargsforeach(self):
        self.parser_foreach.add_argument('cmd', help='command string')

    # Blog site commands
    # ------------------
    def donew(self, args):
        """create a new blog site"""
        self.info('Getting octopress source')
        newblogdir = args.blogname
        git.clone('git://github.com/imathis/octopress.git', newblogdir)
        msg = '\n'.join(['Cloned octopress source code in {}'.format(newblogdir),
                  'please do the following commands for initialize',
                  'cd {}'.format(newblogdir),
                  '{} init'.format(self.execname)
                    ])
        self.info(msg)

    def _setargsnew(self):
        self.parser_new.add_argument('blogname', help='Blog name')

    def doinit(self, args=None):
        """init blog setup (only for github deploy method"""
        self.info('setting github deploy configuration')
        gem.install('bundler')
        self.doupdate_bundle()
        rake('install', via_shell=True)
        rake('setup_github_pages', via_shell=True)
        git.add('.')
        git.commit(m='Finished github deploy settings')
        self.info('setup deploy hosting:github')

    def doupgrade(self, args=None):
        """upgrade blog"""
        self.doupdate_octopress()
        msg = ['octopress source updated!',
               'please run {} deploy to update change in your blog'.format(self.execname)]
        self.info('\n'.join(msg))

    def doupdate_octopress(self, args=None):
        """update octopress source"""
        git.checkout('source')
        git.pull('octopress', 'master')
        self.doupdate_bundle()
        rake('update_source', via_shell=True)
        rake('update_style', via_shell=True)

    def doupdate_bundle(self, args=None):
        """update and install ruby bundle"""
        bundle('update', via_shell=True)
        bundle('install', via_shell=True)

    def dodeploy(self, args):
        """deploy content to remote server"""
        git.checkout('source')
        git.push('origin', 'source')
        rake('generate', via_shell=True)
        rake('deploy', via_shell=True)

    def dopreview(self, args):
        """start a server to preview blog"""
        rake('preview', via_shell=True)

    # Post/Page Commands
    # ------------------
    def dodrafts(self, args):
        """list draft posts"""
        lines=[]
        for index, branch_name in enumerate(self.branchs, start=1):
            filename = self._find_mod_filename(branch_name)
            lines.append("[{}] {} (branch: {})".format(index, filename, branch_name))
        if lines:
            self.info('\n'.join(lines))

    def dopage(self, args):
        """create a new page"""
        self._new_item('page', args.title)

    def _setargspage(self):
        self.parser_page.add_argument('title', help='page title')

    def dopost(self, args):
        """create a new post as a draft"""
        filename = os.path.basename(self._new_item('post', args.title))
        draft_branch="drafts/{}".format(filename).replace('.markdown','')
        git.checkout('source', b=draft_branch)
        git.add(os.path.join(self.blogdir, 'source', '_posts', filename))
        msg="start to write {}".format(args.title)
        git.commit(m=msg)

    def _setargspost(self):
        self.parser_post.add_argument('title', help='post title')

    def _new_item(self, item_name, title):
        ret=rake('new_{}["{}"]'.format(item_name, title))
        if not ret:
            exit()
        filename  = ret.replace('\n','').split(':')[1].strip()
        sensible_editor(os.path.join(self.blogdir, filename), via_shell=True)
        return filename

    def doedit(self, args):
        """edit draft post"""
        draft_branch = self.draft_branchs(args.index-1)
        git.checkout(draft_branch)
        filename = self._find_mod_filename(draft_branch)
        sensible_editor(os.path.join(self.blogdir, filename), via_shell=True)
        self.info('remeber commit changes, if you want to stop writting!')

    def _setargsedit(self):
        self.parser_edit.add_argument('index', type=int, help='draft post index')

    def dopublish(self, args):
        """let draft post is avaliable to publish and draft branch will be removed"""
        draft_branch = self.draft_branchs(args.index)
        git.checkout('source')
        git.merge(draft_branch, no_ff=True, via_shell=True)
        git.branch(draft_branch, D=True)
        msg = ['You are current in source branch, {} is publishable now',
               'the post will also include in your blog after next deploy']
        self.info('\n'.join(msg))

    def _setargspublish(self):
        self.parser_publish.add_argument('index', type=int, help='draft post index')

    # Utils functions
    # ---------------
    def draft_branchs(self, index=None):
        if index is None:
            return self.branchs
        try:
            return self.branchs[index-1]
        except IndexError:
            self.die('draft post not found')

    def current_branch(self):
        for b in git.branch().split('\n'):
            if '*' in b:
                return b.replace('* ','')

    def _find_mod_filename(self, branch):
        output = git.diff(branch+'^', branch, name_only=True)
        if not output:
            self.die('can not find post in branch {}'.format(branch))

        blobs = output.split('\n')
        if blobs:
            try:
                return filter(lambda e : '.markdown' in e, blobs)[0]
            except IndexError:
                self.die('branch {} has more than 1 markdown file'.format(branch))

    def die(self, msg):
        self.err(msg)
        exit()

    def err(self, msg):
        print 'Error:'+msg

    def info(self, msg):
        print msg

if __name__ == '__main__':
    import sys
    c=Console()
    c.prepare()
    c.run(sys.argv[1:])
